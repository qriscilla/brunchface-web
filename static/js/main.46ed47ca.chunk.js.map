{"version":3,"sources":["components/layout/Header.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js","images/toast.png"],"names":["Header","className","href","src","toast","alt","type","id","for","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8QA6BeA,MA1Bf,WACI,OAEI,4BAAQC,UAAU,UAEd,uBAAGC,KAAK,KACJ,yBAAKC,IAAKC,IAAOC,IAAKD,IAAOH,UAAU,eACvC,0BAAMA,UAAU,gBAAhB,eAGJ,2BAAOA,UAAU,WAAWK,KAAK,WAAWC,GAAG,aAC/C,2BAAON,UAAU,YAAYO,IAAI,YAAW,0BAAMP,UAAU,cAE5D,wBAAIA,UAAU,eACV,uBAAGC,KAAK,KAAI,qCACZ,uBAAGA,KAAK,KAAI,sCACZ,uBAAGA,KAAK,KAAI,4CACZ,uBAAGA,KAAK,KAAI,wCACZ,uBAAGA,KAAK,KAAI,wC,iCCCbO,MAlBf,WACI,OACI,yBAAKR,UAAU,UAEX,0BAAMA,UAAU,eACZ,kBAAC,IAAD,CAAcA,UAAU,iBACxB,kBAAC,IAAD,CAAeA,UAAU,kBAG7B,0BAAMA,UAAU,gBAAhB,sDCMGS,MAdf,WACE,OACE,6BACE,kBAAC,EAAD,MAEE,yBAAKT,UAAU,SAIjB,kBAAC,EAAD,QCFcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.46ed47ca.chunk.js","sourcesContent":["import React from 'react';\nimport toast from '../../images/toast.png';\n  \nfunction Header() {\n    return (\n\n        <header className=\"header\">\n\n            <a href='/'>\n                <img src={toast} alt={toast} className='header_img' />\n                <span className='header_title'>BRUNCHFACE</span>\n            </a>\n\n            <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\n            <label className=\"menu-icon\" for=\"menu-btn\"><span className=\"nav-icon\"></span></label>\n\n            <ul className=\"header_menu\">\n                <a href=\"/\"><li>HOME</li></a>\n                <a href=\"/\"><li>ABOUT</li></a>\n                <a href=\"/\"><li>HOW TO PLAY</li></a>\n                <a href=\"/\"><li>CONTACT</li></a>\n                <a href=\"/\"><li>TEAM</li></a>\n            </ul>\n\n        </header>\n\n    )\n}\n\nexport default Header;","import React from 'react';\nimport FacebookIcon from '@material-ui/icons/Facebook';\nimport InstagramIcon from '@material-ui/icons/Instagram';\n\nfunction Footer() {\n    return (\n        <div className='footer'>\n\n            <span className='footer_left'>\n                <FacebookIcon className='footer_icons'/>\n                <InstagramIcon className='footer_icons'/>\n            </span>\n\n            <span className='footer_right'>\n                Privacy Policy &nbsp; &nbsp; &nbsp;\n                Terms & Conditions\n            </span>\n            \n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport Footer from './components/layout/Footer';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n\n        <div className='body'>\n\n        </div>\n        \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/toast.66b15967.png\";"],"sourceRoot":""}